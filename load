#!/bin/dash

# TODO: add termination notification, do somecleanup, need to revert back
# TODO: add timeout mechanism on clone function
# TODO: add flexible node selection
# TODO: make some hardcoded values as variable for future change, like directory name - .cofing/nodes
# TODO: research on what's the benefit of using subshell in shell script
# TODO: research on gentoo portage output style

clone() {
    if [ "$*" = "clashfree" ]; then  # $* treat all arguments as a string rather than as an array like $a
	git pull
    else 
	git clone https://github.com/anaer/sub.git
    fi
}

load_sub_retry() {
    time=1
    while [ "$time" -lt 4 ]; do
	echo "\ntrying git clone $time time"
	if clone; then
	    while [ ! -f sub/clash.yaml ]; do # alternative: inotifywait, see references below
		echo "\nwaiting for git writing files for 1 sec"; sleep 1
	    done
	    echo "\n:) Done git cloning sub"
        if [ "$(uname)" = "Darwin" ]; then
	        sed -Ei "" '/RULE/d' sub/clash.yaml
        else
	        sed -Ei '/RULE/d' sub/clash.yaml
        fi
	    echo "\n:) Removed bad lines by sed"
	    return 0
	else
	    time=$((time + 1))
	fi
    done
    return 1
}

load_clashfree_retry() {
    time=1
    while [ "$time" -lt 4 ]
    do
	echo "\ntrying git pull $time time"
        clone clashfree
	# the 1st way to check of a command succeeded, but not suggested
	if [ $? -eq 0 ]; then
	    return 0
	else
	    time=$((time + 1))
	fi
    done
    return 1
}

echo "\ncd into $HOME/.config/nodes"; cd "$HOME"/.config/nodes || exit
echo "backup sub as sub.bak"; mv sub sub.bak

echo "\n=> Start updating sub..."

# the 2nd way to check if a command succeeded
load_sub_retry
return_sub=$?
if [ $return_sub -ne 0 ]; then
    echo "\n|| check folder" && ll
    mv sub.bak sub
    echo "\n(::: Failure on sub, put it back"
    echo "\n|| check folder" && ll
else
    rm -rf sub.bak
    echo "\n:::) Done updating sub, remove backup"
    echo "\n || check folder" && ll
    (
	pkill clash
	plug
    )
fi

echo "\ncd into $HOME/.config/nodes/clashfree"
cd "$HOME"/.config/nodes/clashfree || exit

echo "\n=> Start updating clashfree..."

# the 3rd way to way if a command succeeded
if load_clashfree_retry; then
    echo "\n:::) Done updating clashfree"
else
    echo "\n(::: Failure on clashfree"
fi

echo "go back to $HOME/.config/nodes" && cd ..
echo "\n|| check folder" && ll


# References
# https://unix.stackexchange.com/questions/309339/how-to-exit-a-shell-script-if-one-part-of-it-fails
# https://unix.stackexchange.com/questions/185283/how-do-i-wait-for-a-file-in-the-shell-script
